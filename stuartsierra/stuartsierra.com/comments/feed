<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments for Digital Digressions by Stuart Sierra</title>
	<atom:link href="https://stuartsierra.com/comments/feed" rel="self" type="application/rss+xml" />
	<link>https://stuartsierra.com</link>
	<description>From programming to everything else</description>
	<lastBuildDate>Fri, 01 Jan 2016 15:25:57 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6</generator>
	<item>
		<title>Comment on Clojure 2015 Year in Review by Alex Ott</title>
		<link>https://stuartsierra.com/2015/12/31/clojure-2015-year-in-review/comment-page-1#comment-55019</link>
		<dc:creator><![CDATA[Alex Ott]]></dc:creator>
		<pubDate>Fri, 01 Jan 2016 15:25:57 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=913#comment-55019</guid>
		<description><![CDATA[Just for statistics: Twitter account for Planet Clojure has 6668 followers right now]]></description>
		<content:encoded><![CDATA[<p>Just for statistics: Twitter account for Planet Clojure has 6668 followers right now</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure 2015 Year in Review by huahaiy</title>
		<link>https://stuartsierra.com/2015/12/31/clojure-2015-year-in-review/comment-page-1#comment-55015</link>
		<dc:creator><![CDATA[huahaiy]]></dc:creator>
		<pubDate>Fri, 01 Jan 2016 03:53:10 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=913#comment-55015</guid>
		<description><![CDATA[Regarding academic interest in Clojure, I would like to add that Frank Wood&#039;s group at Oxford chose to host their probabilistic programming language called Anglican inside Clojure (http://www.robots.ox.ac.uk/~fwood/anglican/).]]></description>
		<content:encoded><![CDATA[<p>Regarding academic interest in Clojure, I would like to add that Frank Wood&#8217;s group at Oxford chose to host their probabilistic programming language called Anglican inside Clojure (<a href="http://www.robots.ox.ac.uk/~fwood/anglican/" rel="nofollow">http://www.robots.ox.ac.uk/~fwood/anglican/</a>).</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Lazy Effects by Stuart</title>
		<link>https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects/comment-page-1#comment-54822</link>
		<dc:creator><![CDATA[Stuart]]></dc:creator>
		<pubDate>Tue, 15 Sep 2015 21:19:43 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=883#comment-54822</guid>
		<description><![CDATA[My recommendation is to avoid side-effecting functions in lazy sequences, period.]]></description>
		<content:encoded><![CDATA[<p>My recommendation is to avoid side-effecting functions in lazy sequences, period.</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Lazy Effects by Chris Oakman</title>
		<link>https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects/comment-page-1#comment-54821</link>
		<dc:creator><![CDATA[Chris Oakman]]></dc:creator>
		<pubDate>Tue, 15 Sep 2015 18:45:52 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=883#comment-54821</guid>
		<description><![CDATA[I wrote this on the ClojureScript cheatsheet under the &quot;Seq in, Seq out&quot; tooltip:

&quot;You can force a sequence to evaluate all its elements with the doall function. This is useful when you want to see the results of a side-effecting function over an entire sequence.&quot;

Maybe I should change it to refence doseq instead? Thoughts?

Thanks,
Chris Oakman]]></description>
		<content:encoded><![CDATA[<p>I wrote this on the ClojureScript cheatsheet under the &#8220;Seq in, Seq out&#8221; tooltip:</p>
<p>&#8220;You can force a sequence to evaluate all its elements with the doall function. This is useful when you want to see the results of a side-effecting function over an entire sequence.&#8221;</p>
<p>Maybe I should change it to refence doseq instead? Thoughts?</p>
<p>Thanks,<br />
Chris Oakman</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Lazy Effects by Henry</title>
		<link>https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects/comment-page-1#comment-54808</link>
		<dc:creator><![CDATA[Henry]]></dc:creator>
		<pubDate>Wed, 26 Aug 2015 18:20:52 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=883#comment-54808</guid>
		<description><![CDATA[Mapv is also eager I believe]]></description>
		<content:encoded><![CDATA[<p>Mapv is also eager I believe</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Lazy Effects by Stuart</title>
		<link>https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects/comment-page-1#comment-54807</link>
		<dc:creator><![CDATA[Stuart]]></dc:creator>
		<pubDate>Tue, 25 Aug 2015 19:42:22 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=883#comment-54807</guid>
		<description><![CDATA[As with anything else, use your own judgment. The key question to ask is, “Does it matter *when* this effect happens?”]]></description>
		<content:encoded><![CDATA[<p>As with anything else, use your own judgment. The key question to ask is, “Does it matter *when* this effect happens?”</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Lazy Effects by dasuxullebt</title>
		<link>https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects/comment-page-1#comment-54806</link>
		<dc:creator><![CDATA[dasuxullebt]]></dc:creator>
		<pubDate>Tue, 25 Aug 2015 19:12:36 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=883#comment-54806</guid>
		<description><![CDATA[What about stuff like DiffArrays? That is, structures that have mutable state, but abstract that state away? Or debugging?]]></description>
		<content:encoded><![CDATA[<p>What about stuff like DiffArrays? That is, structures that have mutable state, but abstract that state away? Or debugging?</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Redundant map by AlexBaranosky</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54803</link>
		<dc:creator><![CDATA[AlexBaranosky]]></dc:creator>
		<pubDate>Wed, 12 Aug 2015 23:29:31 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54803</guid>
		<description><![CDATA[Yes! I agree whole heartedly. I also never write maps-over-many-things fns unless they need shared context (not the norm)]]></description>
		<content:encoded><![CDATA[<p>Yes! I agree whole heartedly. I also never write maps-over-many-things fns unless they need shared context (not the norm)</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Redundant map by Richard</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54802</link>
		<dc:creator><![CDATA[Richard]]></dc:creator>
		<pubDate>Tue, 11 Aug 2015 02:40:27 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54802</guid>
		<description><![CDATA[I like the idea but kind of disconcur with the elaboration. A proliferation of one-at-a-time functions is an invitation to the old n+1 selects problem. Better to force your consumers to use functions that operate on sequences from the outset if you suspect that you&#039;ll ever want to implement some form of batching behaviour.

Awesome blog though, thank you!]]></description>
		<content:encoded><![CDATA[<p>I like the idea but kind of disconcur with the elaboration. A proliferation of one-at-a-time functions is an invitation to the old n+1 selects problem. Better to force your consumers to use functions that operate on sequences from the outset if you suspect that you&#8217;ll ever want to implement some form of batching behaviour.</p>
<p>Awesome blog though, thank you!</p>
]]></content:encoded>
	</item>
	<item>
		<title>Comment on Clojure Don’ts: Redundant map by Stuart</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54801</link>
		<dc:creator><![CDATA[Stuart]]></dc:creator>
		<pubDate>Mon, 10 Aug 2015 13:17:31 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54801</guid>
		<description><![CDATA[Yes, I agree. One-thing-at-a-time functions are more flexible than collection-to-collection functions.]]></description>
		<content:encoded><![CDATA[<p>Yes, I agree. One-thing-at-a-time functions are more flexible than collection-to-collection functions.</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Dynamic page generated in 1.224 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-09-01 21:10:37 -->

<!-- Compression = gzip -->