<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Impedence Mismatch</title>
	<atom:link href="https://stuartsierra.com/2009/10/27/impedence-mismatch/feed" rel="self" type="application/rss+xml" />
	<link>https://stuartsierra.com/2009/10/27/impedence-mismatch</link>
	<description>From programming to everything else</description>
	<lastBuildDate>Fri, 01 Jan 2016 15:25:57 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6</generator>
	<item>
		<title>By: David Semeria</title>
		<link>https://stuartsierra.com/2009/10/27/impedence-mismatch/comment-page-1#comment-42932</link>
		<dc:creator><![CDATA[David Semeria]]></dc:creator>
		<pubDate>Tue, 15 Dec 2009 10:56:58 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=327#comment-42932</guid>
		<description><![CDATA[Well done, Stuart! 

I think this is a fascinating area and, perversely in the internet age of data sharing, somewhat under-researched. Personally, I have big issues with current techniques for abstracting structured (hierarchical) data. The obvious candidate is xml, but I think it has a number of flaws. Some are niggles (it&#039;s too verbose) but the main criticism is that it does not separate structure from content. This severely compromises its usefulness. Suppose I wanted to represent a file system using xml, every time I move a file from one folder to another, I have to write back the entire xml file, when in fact all I really need to do is move the file from one part of the structure to another.

I&#039;ve spent a lot of time thinking about and implementing what in my view are more elegant and efficient solutions. If you would like to discuss these issues further, feel free to drop me a line!]]></description>
		<content:encoded><![CDATA[<p>Well done, Stuart! </p>
<p>I think this is a fascinating area and, perversely in the internet age of data sharing, somewhat under-researched. Personally, I have big issues with current techniques for abstracting structured (hierarchical) data. The obvious candidate is xml, but I think it has a number of flaws. Some are niggles (it&#8217;s too verbose) but the main criticism is that it does not separate structure from content. This severely compromises its usefulness. Suppose I wanted to represent a file system using xml, every time I move a file from one folder to another, I have to write back the entire xml file, when in fact all I really need to do is move the file from one part of the structure to another.</p>
<p>I&#8217;ve spent a lot of time thinking about and implementing what in my view are more elegant and efficient solutions. If you would like to discuss these issues further, feel free to drop me a line!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Devin</title>
		<link>https://stuartsierra.com/2009/10/27/impedence-mismatch/comment-page-1#comment-42905</link>
		<dc:creator><![CDATA[Devin]]></dc:creator>
		<pubDate>Fri, 20 Nov 2009 19:25:04 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=327#comment-42905</guid>
		<description><![CDATA[Excellent post.  I can add some ammunition for your argument.  We recently wrote some simple tools to maintain and update information in a database.  The decision to model the schema inside the software (rather than simply having the software operate on the data in the database) substantially reduced the code needed to complete the project, but fleshing out the nuances of the model (and making exceptions for the models assumptions) substantially postponed the project.]]></description>
		<content:encoded><![CDATA[<p>Excellent post.  I can add some ammunition for your argument.  We recently wrote some simple tools to maintain and update information in a database.  The decision to model the schema inside the software (rather than simply having the software operate on the data in the database) substantially reduced the code needed to complete the project, but fleshing out the nuances of the model (and making exceptions for the models assumptions) substantially postponed the project.</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Dynamic page generated in 0.299 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-09-02 00:06:28 -->

<!-- Compression = gzip -->