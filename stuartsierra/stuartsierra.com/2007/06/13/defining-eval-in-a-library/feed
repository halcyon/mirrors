<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Defining Eval &#8230; In a Library</title>
	<atom:link href="https://stuartsierra.com/2007/06/13/defining-eval-in-a-library/feed" rel="self" type="application/rss+xml" />
	<link>https://stuartsierra.com/2007/06/13/defining-eval-in-a-library</link>
	<description>From programming to everything else</description>
	<lastBuildDate>Fri, 01 Jan 2016 15:25:57 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6</generator>
	<item>
		<title>By: Anton van Straaten</title>
		<link>https://stuartsierra.com/2007/06/13/defining-eval-in-a-library/comment-page-1#comment-19662</link>
		<dc:creator><![CDATA[Anton van Straaten]]></dc:creator>
		<pubDate>Wed, 31 Oct 2007 00:00:04 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/2007/06/13/defining-eval-in-a-library#comment-19662</guid>
		<description><![CDATA[Came across this while googling.  One point I&#039;d like to add is that as &quot;recently&quot; as R4RS, eval wasn&#039;t a standard part of Scheme.  There&#039;s an old FAQ on the subject, &quot;Why is there no EVAL in Scheme?&quot;, at: http://www.faqs.org/faqs/scheme-faq/part1/section-12.html .  So the question of how or even whether to handle eval isn&#039;t a new one for Scheme by any means.

The FAQ describes three positions regarding eval in the Scheme community at that time.  By not specifying eval, R4RS effectively endorsed the first position, although of course implementations could go ahead and do their own thing.  R5RS specified a strange hybrid between the second and third positions: it required an environment to be specified, but offered no facilities for manipulating environments, so ended up not guaranteeing much at all.  R6RS adds better support for the third position, linking the issue of eval&#039;s environment to the module system. This also still caters to the first position, by allowing static knowledge of the dependencies of eval.

I think surprise on this issue may have been fostered by non-standard extensions in some of the more dynamic implementations, or by exposure to other Lisps.  But when viewed in the context of Scheme&#039;s history on the subject, R6RS eval is very appropriate to a Scheme standard.]]></description>
		<content:encoded><![CDATA[<p>Came across this while googling.  One point I&#8217;d like to add is that as &#8220;recently&#8221; as R4RS, eval wasn&#8217;t a standard part of Scheme.  There&#8217;s an old FAQ on the subject, &#8220;Why is there no EVAL in Scheme?&#8221;, at: <a href="http://www.faqs.org/faqs/scheme-faq/part1/section-12.html" rel="nofollow">http://www.faqs.org/faqs/scheme-faq/part1/section-12.html</a> .  So the question of how or even whether to handle eval isn&#8217;t a new one for Scheme by any means.</p>
<p>The FAQ describes three positions regarding eval in the Scheme community at that time.  By not specifying eval, R4RS effectively endorsed the first position, although of course implementations could go ahead and do their own thing.  R5RS specified a strange hybrid between the second and third positions: it required an environment to be specified, but offered no facilities for manipulating environments, so ended up not guaranteeing much at all.  R6RS adds better support for the third position, linking the issue of eval&#8217;s environment to the module system. This also still caters to the first position, by allowing static knowledge of the dependencies of eval.</p>
<p>I think surprise on this issue may have been fostered by non-standard extensions in some of the more dynamic implementations, or by exposure to other Lisps.  But when viewed in the context of Scheme&#8217;s history on the subject, R6RS eval is very appropriate to a Scheme standard.</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Dynamic page generated in 0.264 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-09-02 13:03:14 -->

<!-- Compression = gzip -->