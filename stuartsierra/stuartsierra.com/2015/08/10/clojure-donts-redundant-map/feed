<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Clojure Donâ€™ts: Redundant map</title>
	<atom:link href="https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/feed" rel="self" type="application/rss+xml" />
	<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map</link>
	<description>From programming to everything else</description>
	<lastBuildDate>Fri, 01 Jan 2016 15:25:57 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6</generator>
	<item>
		<title>By: AlexBaranosky</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54803</link>
		<dc:creator><![CDATA[AlexBaranosky]]></dc:creator>
		<pubDate>Wed, 12 Aug 2015 23:29:31 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54803</guid>
		<description><![CDATA[Yes! I agree whole heartedly. I also never write maps-over-many-things fns unless they need shared context (not the norm)]]></description>
		<content:encoded><![CDATA[<p>Yes! I agree whole heartedly. I also never write maps-over-many-things fns unless they need shared context (not the norm)</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Richard</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54802</link>
		<dc:creator><![CDATA[Richard]]></dc:creator>
		<pubDate>Tue, 11 Aug 2015 02:40:27 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54802</guid>
		<description><![CDATA[I like the idea but kind of disconcur with the elaboration. A proliferation of one-at-a-time functions is an invitation to the old n+1 selects problem. Better to force your consumers to use functions that operate on sequences from the outset if you suspect that you&#039;ll ever want to implement some form of batching behaviour.

Awesome blog though, thank you!]]></description>
		<content:encoded><![CDATA[<p>I like the idea but kind of disconcur with the elaboration. A proliferation of one-at-a-time functions is an invitation to the old n+1 selects problem. Better to force your consumers to use functions that operate on sequences from the outset if you suspect that you&#8217;ll ever want to implement some form of batching behaviour.</p>
<p>Awesome blog though, thank you!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Stuart</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54801</link>
		<dc:creator><![CDATA[Stuart]]></dc:creator>
		<pubDate>Mon, 10 Aug 2015 13:17:31 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54801</guid>
		<description><![CDATA[Yes, I agree. One-thing-at-a-time functions are more flexible than collection-to-collection functions.]]></description>
		<content:encoded><![CDATA[<p>Yes, I agree. One-thing-at-a-time functions are more flexible than collection-to-collection functions.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: David Chelimsky</title>
		<link>https://stuartsierra.com/2015/08/10/clojure-donts-redundant-map/comment-page-1#comment-54800</link>
		<dc:creator><![CDATA[David Chelimsky]]></dc:creator>
		<pubDate>Mon, 10 Aug 2015 13:11:02 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=877#comment-54800</guid>
		<description><![CDATA[I&#039;d take this one step further and say that, absent the motivation you described (something special about this particular batch job), even when you only have a process-many-things fn (and do not have a process-thing fn), it is preferable to convert the process-many-things fn to a process-thing fn and update the call sites to use map. It makes things more flexible as requirements and code evolves, and nudges a codebase toward consistency. WDYT?]]></description>
		<content:encoded><![CDATA[<p>I&#8217;d take this one step further and say that, absent the motivation you described (something special about this particular batch job), even when you only have a process-many-things fn (and do not have a process-thing fn), it is preferable to convert the process-many-things fn to a process-thing fn and update the call sites to use map. It makes things more flexible as requirements and code evolves, and nudges a codebase toward consistency. WDYT?</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Dynamic page generated in 0.270 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-09-02 12:56:46 -->

<!-- Compression = gzip -->