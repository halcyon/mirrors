<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Affordance and Concision</title>
	<atom:link href="https://stuartsierra.com/2013/02/04/affordance-concision/feed" rel="self" type="application/rss+xml" />
	<link>https://stuartsierra.com/2013/02/04/affordance-concision</link>
	<description>From programming to everything else</description>
	<lastBuildDate>Fri, 01 Jan 2016 15:25:57 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6</generator>
	<item>
		<title>By: Phil</title>
		<link>https://stuartsierra.com/2013/02/04/affordance-concision/comment-page-1#comment-44977</link>
		<dc:creator><![CDATA[Phil]]></dc:creator>
		<pubDate>Mon, 04 Feb 2013 22:46:13 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=693#comment-44977</guid>
		<description><![CDATA[&#062; We can’t do anything about the name of contains? without breaking a lot more code.

Of course we can; rename it to &lt;code&gt;contains-key?&lt;/code&gt; and introduce an alias for backwards-compatibility. At some point you have all calls to &lt;code&gt;contains?&lt;/code&gt; emit a warning, and then at a major version bump you remove it. Easy.]]></description>
		<content:encoded><![CDATA[<p>&gt; We can’t do anything about the name of contains? without breaking a lot more code.</p>
<p>Of course we can; rename it to <code>contains-key?</code> and introduce an alias for backwards-compatibility. At some point you have all calls to <code>contains?</code> emit a warning, and then at a major version bump you remove it. Easy.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mike</title>
		<link>https://stuartsierra.com/2013/02/04/affordance-concision/comment-page-1#comment-44974</link>
		<dc:creator><![CDATA[Mike]]></dc:creator>
		<pubDate>Mon, 04 Feb 2013 16:02:43 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=693#comment-44974</guid>
		<description><![CDATA[Good article Stuart, and a very important point.

I think the changes like CLJ-932 are in the right direction: silent failure is *much* worse than throwing exceptions and forcing people to write a couple of extra manual checks. Silent failure can lead to some very nasty bugs.]]></description>
		<content:encoded><![CDATA[<p>Good article Stuart, and a very important point.</p>
<p>I think the changes like CLJ-932 are in the right direction: silent failure is *much* worse than throwing exceptions and forcing people to write a couple of extra manual checks. Silent failure can lead to some very nasty bugs.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Michael Nygard</title>
		<link>https://stuartsierra.com/2013/02/04/affordance-concision/comment-page-1#comment-44972</link>
		<dc:creator><![CDATA[Michael Nygard]]></dc:creator>
		<pubDate>Mon, 04 Feb 2013 14:57:58 +0000</pubDate>
		<guid isPermaLink="false">http://stuartsierra.com/?p=693#comment-44972</guid>
		<description><![CDATA[This mirrors the debate about power vs. protection in programming languages. Chuck Moore has described Forth as amplifying the power of individual programmers, power to do good as well as harm. He and his collaborators think of Forth as a way to move the mass of programmers toward the ends of the bell curve. In contrast, protective languages--such as Java and Ada--tend to diminish the harm done by the worst, but also diminish the productivity of the best. Thus they move programmers toward the middle of the curve. 

I think we are seeing a decade-long shift away from protective languages. (Michael Feathers has called it the &quot;End of the Era of Paternalistic Languages.&quot; I&#039;m enjoying it.]]></description>
		<content:encoded><![CDATA[<p>This mirrors the debate about power vs. protection in programming languages. Chuck Moore has described Forth as amplifying the power of individual programmers, power to do good as well as harm. He and his collaborators think of Forth as a way to move the mass of programmers toward the ends of the bell curve. In contrast, protective languages&#8211;such as Java and Ada&#8211;tend to diminish the harm done by the worst, but also diminish the productivity of the best. Thus they move programmers toward the middle of the curve. </p>
<p>I think we are seeing a decade-long shift away from protective languages. (Michael Feathers has called it the &#8220;End of the Era of Paternalistic Languages.&#8221; I&#8217;m enjoying it.</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Dynamic page generated in 0.269 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-09-02 13:02:28 -->

<!-- Compression = gzip -->